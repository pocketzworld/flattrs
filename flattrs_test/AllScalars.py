# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flattrs_test

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AllScalars(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AllScalars()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAllScalars(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AllScalars
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AllScalars
    def Boolean(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # AllScalars
    def Uint8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # AllScalars
    def Uint16(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # AllScalars
    def Uint32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # AllScalars
    def Uint64(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # AllScalars
    def Int8(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # AllScalars
    def Int16(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # AllScalars
    def Int32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # AllScalars
    def Int64(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # AllScalars
    def Float32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # AllScalars
    def Float64(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

def AllScalarsStart(builder): builder.StartObject(11)
def Start(builder):
    return AllScalarsStart(builder)
def AllScalarsAddBoolean(builder, boolean): builder.PrependBoolSlot(0, boolean, 0)
def AddBoolean(builder, boolean):
    return AllScalarsAddBoolean(builder, boolean)
def AllScalarsAddUint8(builder, uint8): builder.PrependUint8Slot(1, uint8, 0)
def AddUint8(builder, uint8):
    return AllScalarsAddUint8(builder, uint8)
def AllScalarsAddUint16(builder, uint16): builder.PrependUint16Slot(2, uint16, 0)
def AddUint16(builder, uint16):
    return AllScalarsAddUint16(builder, uint16)
def AllScalarsAddUint32(builder, uint32): builder.PrependUint32Slot(3, uint32, 0)
def AddUint32(builder, uint32):
    return AllScalarsAddUint32(builder, uint32)
def AllScalarsAddUint64(builder, uint64): builder.PrependUint64Slot(4, uint64, 0)
def AddUint64(builder, uint64):
    return AllScalarsAddUint64(builder, uint64)
def AllScalarsAddInt8(builder, int8): builder.PrependInt8Slot(5, int8, 0)
def AddInt8(builder, int8):
    return AllScalarsAddInt8(builder, int8)
def AllScalarsAddInt16(builder, int16): builder.PrependInt16Slot(6, int16, 0)
def AddInt16(builder, int16):
    return AllScalarsAddInt16(builder, int16)
def AllScalarsAddInt32(builder, int32): builder.PrependInt32Slot(7, int32, 0)
def AddInt32(builder, int32):
    return AllScalarsAddInt32(builder, int32)
def AllScalarsAddInt64(builder, int64): builder.PrependInt64Slot(8, int64, 0)
def AddInt64(builder, int64):
    return AllScalarsAddInt64(builder, int64)
def AllScalarsAddFloat32(builder, float32): builder.PrependFloat32Slot(9, float32, 0.0)
def AddFloat32(builder, float32):
    return AllScalarsAddFloat32(builder, float32)
def AllScalarsAddFloat64(builder, float64): builder.PrependFloat64Slot(10, float64, 0.0)
def AddFloat64(builder, float64):
    return AllScalarsAddFloat64(builder, float64)
def AllScalarsEnd(builder): return builder.EndObject()
def End(builder):
    return AllScalarsEnd(builder)