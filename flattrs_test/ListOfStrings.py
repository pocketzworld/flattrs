# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flattrs_test

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ListOfStrings(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ListOfStrings()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsListOfStrings(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ListOfStrings
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ListOfStrings
    def Content(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ListOfStrings
    def ContentLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ListOfStrings
    def ContentIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ListOfStringsStart(builder): builder.StartObject(1)
def Start(builder):
    return ListOfStringsStart(builder)
def ListOfStringsAddContent(builder, content): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)
def AddContent(builder, content):
    return ListOfStringsAddContent(builder, content)
def ListOfStringsStartContentVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartContentVector(builder, numElems):
    return ListOfStringsStartContentVector(builder, numElems)
def ListOfStringsEnd(builder): return builder.EndObject()
def End(builder):
    return ListOfStringsEnd(builder)