# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flattrs_test

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SeqVectorOfCommon1(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SeqVectorOfCommon1()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSeqVectorOfCommon1(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SeqVectorOfCommon1
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SeqVectorOfCommon1
    def VecOfCommon(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from flattrs_test.Common1 import Common1
            obj = Common1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SeqVectorOfCommon1
    def VecOfCommonLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SeqVectorOfCommon1
    def VecOfCommonIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def SeqVectorOfCommon1Start(builder): builder.StartObject(1)
def Start(builder):
    return SeqVectorOfCommon1Start(builder)
def SeqVectorOfCommon1AddVecOfCommon(builder, vecOfCommon): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfCommon), 0)
def AddVecOfCommon(builder, vecOfCommon):
    return SeqVectorOfCommon1AddVecOfCommon(builder, vecOfCommon)
def SeqVectorOfCommon1StartVecOfCommonVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVecOfCommonVector(builder, numElems):
    return SeqVectorOfCommon1StartVecOfCommonVector(builder, numElems)
def SeqVectorOfCommon1End(builder): return builder.EndObject()
def End(builder):
    return SeqVectorOfCommon1End(builder)