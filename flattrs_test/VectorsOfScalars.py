# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flattrs_test

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VectorsOfScalars(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VectorsOfScalars()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVectorsOfScalars(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VectorsOfScalars
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VectorsOfScalars
    def VecOfBools(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # VectorsOfScalars
    def VecOfBoolsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # VectorsOfScalars
    def VecOfBoolsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfBoolsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # VectorsOfScalars
    def VecOfUint8s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # VectorsOfScalars
    def VecOfUint8sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfUint8sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfUint8sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # VectorsOfScalars
    def VecOfUint16s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # VectorsOfScalars
    def VecOfUint16sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint16Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfUint16sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfUint16sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # VectorsOfScalars
    def VecOfUint32s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # VectorsOfScalars
    def VecOfUint32sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfUint32sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfUint32sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # VectorsOfScalars
    def VecOfUint64s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # VectorsOfScalars
    def VecOfUint64sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint64Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfUint64sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfUint64sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # VectorsOfScalars
    def VecOfInt8s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # VectorsOfScalars
    def VecOfInt8sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfInt8sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfInt8sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # VectorsOfScalars
    def VecOfInt16s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # VectorsOfScalars
    def VecOfInt16sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfInt16sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfInt16sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # VectorsOfScalars
    def VecOfInt32s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # VectorsOfScalars
    def VecOfInt32sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfInt32sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfInt32sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # VectorsOfScalars
    def VecOfInt64s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # VectorsOfScalars
    def VecOfInt64sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfInt64sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfInt64sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # VectorsOfScalars
    def VecOfFloat32s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # VectorsOfScalars
    def VecOfFloat32sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfFloat32sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfFloat32sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # VectorsOfScalars
    def VecOfFloat64s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # VectorsOfScalars
    def VecOfFloat64sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # VectorsOfScalars
    def VecOfFloat64sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfScalars
    def VecOfFloat64sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

def VectorsOfScalarsStart(builder): builder.StartObject(11)
def Start(builder):
    return VectorsOfScalarsStart(builder)
def VectorsOfScalarsAddVecOfBools(builder, vecOfBools): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfBools), 0)
def AddVecOfBools(builder, vecOfBools):
    return VectorsOfScalarsAddVecOfBools(builder, vecOfBools)
def VectorsOfScalarsStartVecOfBoolsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartVecOfBoolsVector(builder, numElems):
    return VectorsOfScalarsStartVecOfBoolsVector(builder, numElems)
def VectorsOfScalarsAddVecOfUint8s(builder, vecOfUint8s): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfUint8s), 0)
def AddVecOfUint8s(builder, vecOfUint8s):
    return VectorsOfScalarsAddVecOfUint8s(builder, vecOfUint8s)
def VectorsOfScalarsStartVecOfUint8sVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartVecOfUint8sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfUint8sVector(builder, numElems)
def VectorsOfScalarsAddVecOfUint16s(builder, vecOfUint16s): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfUint16s), 0)
def AddVecOfUint16s(builder, vecOfUint16s):
    return VectorsOfScalarsAddVecOfUint16s(builder, vecOfUint16s)
def VectorsOfScalarsStartVecOfUint16sVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartVecOfUint16sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfUint16sVector(builder, numElems)
def VectorsOfScalarsAddVecOfUint32s(builder, vecOfUint32s): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfUint32s), 0)
def AddVecOfUint32s(builder, vecOfUint32s):
    return VectorsOfScalarsAddVecOfUint32s(builder, vecOfUint32s)
def VectorsOfScalarsStartVecOfUint32sVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVecOfUint32sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfUint32sVector(builder, numElems)
def VectorsOfScalarsAddVecOfUint64s(builder, vecOfUint64s): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfUint64s), 0)
def AddVecOfUint64s(builder, vecOfUint64s):
    return VectorsOfScalarsAddVecOfUint64s(builder, vecOfUint64s)
def VectorsOfScalarsStartVecOfUint64sVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartVecOfUint64sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfUint64sVector(builder, numElems)
def VectorsOfScalarsAddVecOfInt8s(builder, vecOfInt8s): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt8s), 0)
def AddVecOfInt8s(builder, vecOfInt8s):
    return VectorsOfScalarsAddVecOfInt8s(builder, vecOfInt8s)
def VectorsOfScalarsStartVecOfInt8sVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartVecOfInt8sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfInt8sVector(builder, numElems)
def VectorsOfScalarsAddVecOfInt16s(builder, vecOfInt16s): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt16s), 0)
def AddVecOfInt16s(builder, vecOfInt16s):
    return VectorsOfScalarsAddVecOfInt16s(builder, vecOfInt16s)
def VectorsOfScalarsStartVecOfInt16sVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartVecOfInt16sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfInt16sVector(builder, numElems)
def VectorsOfScalarsAddVecOfInt32s(builder, vecOfInt32s): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt32s), 0)
def AddVecOfInt32s(builder, vecOfInt32s):
    return VectorsOfScalarsAddVecOfInt32s(builder, vecOfInt32s)
def VectorsOfScalarsStartVecOfInt32sVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVecOfInt32sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfInt32sVector(builder, numElems)
def VectorsOfScalarsAddVecOfInt64s(builder, vecOfInt64s): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt64s), 0)
def AddVecOfInt64s(builder, vecOfInt64s):
    return VectorsOfScalarsAddVecOfInt64s(builder, vecOfInt64s)
def VectorsOfScalarsStartVecOfInt64sVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartVecOfInt64sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfInt64sVector(builder, numElems)
def VectorsOfScalarsAddVecOfFloat32s(builder, vecOfFloat32s): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfFloat32s), 0)
def AddVecOfFloat32s(builder, vecOfFloat32s):
    return VectorsOfScalarsAddVecOfFloat32s(builder, vecOfFloat32s)
def VectorsOfScalarsStartVecOfFloat32sVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVecOfFloat32sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfFloat32sVector(builder, numElems)
def VectorsOfScalarsAddVecOfFloat64s(builder, vecOfFloat64s): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfFloat64s), 0)
def AddVecOfFloat64s(builder, vecOfFloat64s):
    return VectorsOfScalarsAddVecOfFloat64s(builder, vecOfFloat64s)
def VectorsOfScalarsStartVecOfFloat64sVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartVecOfFloat64sVector(builder, numElems):
    return VectorsOfScalarsStartVecOfFloat64sVector(builder, numElems)
def VectorsOfScalarsEnd(builder): return builder.EndObject()
def End(builder):
    return VectorsOfScalarsEnd(builder)