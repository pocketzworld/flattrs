# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VectorsOfBools(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VectorsOfBools()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVectorsOfBools(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VectorsOfBools
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VectorsOfBools
    def VecOfBools(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # VectorsOfBools
    def VecOfBoolsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # VectorsOfBools
    def VecOfBoolsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfBools
    def VecOfBoolsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def VectorsOfBoolsStart(builder): builder.StartObject(1)
def Start(builder):
    return VectorsOfBoolsStart(builder)
def VectorsOfBoolsAddVecOfBools(builder, vecOfBools): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfBools), 0)
def AddVecOfBools(builder, vecOfBools):
    return VectorsOfBoolsAddVecOfBools(builder, vecOfBools)
def VectorsOfBoolsStartVecOfBoolsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartVecOfBoolsVector(builder, numElems):
    return VectorsOfBoolsStartVecOfBoolsVector(builder, numElems)
def VectorsOfBoolsEnd(builder): return builder.EndObject()
def End(builder):
    return VectorsOfBoolsEnd(builder)