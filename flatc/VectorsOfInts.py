# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VectorsOfInts(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VectorsOfInts()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVectorsOfInts(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VectorsOfInts
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VectorsOfInts
    def VecOfInt8s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # VectorsOfInts
    def VecOfInt8sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int8Flags, o)
        return 0

    # VectorsOfInts
    def VecOfInt8sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfInts
    def VecOfInt8sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # VectorsOfInts
    def VecOfInt16s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int16Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 2))
        return 0

    # VectorsOfInts
    def VecOfInt16sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int16Flags, o)
        return 0

    # VectorsOfInts
    def VecOfInt16sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfInts
    def VecOfInt16sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # VectorsOfInts
    def VecOfInt32s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # VectorsOfInts
    def VecOfInt32sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # VectorsOfInts
    def VecOfInt32sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfInts
    def VecOfInt32sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # VectorsOfInts
    def VecOfInt64s(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # VectorsOfInts
    def VecOfInt64sAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # VectorsOfInts
    def VecOfInt64sLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorsOfInts
    def VecOfInt64sIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def VectorsOfIntsStart(builder): builder.StartObject(4)
def Start(builder):
    return VectorsOfIntsStart(builder)
def VectorsOfIntsAddVecOfInt8s(builder, vecOfInt8s): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt8s), 0)
def AddVecOfInt8s(builder, vecOfInt8s):
    return VectorsOfIntsAddVecOfInt8s(builder, vecOfInt8s)
def VectorsOfIntsStartVecOfInt8sVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartVecOfInt8sVector(builder, numElems):
    return VectorsOfIntsStartVecOfInt8sVector(builder, numElems)
def VectorsOfIntsAddVecOfInt16s(builder, vecOfInt16s): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt16s), 0)
def AddVecOfInt16s(builder, vecOfInt16s):
    return VectorsOfIntsAddVecOfInt16s(builder, vecOfInt16s)
def VectorsOfIntsStartVecOfInt16sVector(builder, numElems): return builder.StartVector(2, numElems, 2)
def StartVecOfInt16sVector(builder, numElems):
    return VectorsOfIntsStartVecOfInt16sVector(builder, numElems)
def VectorsOfIntsAddVecOfInt32s(builder, vecOfInt32s): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt32s), 0)
def AddVecOfInt32s(builder, vecOfInt32s):
    return VectorsOfIntsAddVecOfInt32s(builder, vecOfInt32s)
def VectorsOfIntsStartVecOfInt32sVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartVecOfInt32sVector(builder, numElems):
    return VectorsOfIntsStartVecOfInt32sVector(builder, numElems)
def VectorsOfIntsAddVecOfInt64s(builder, vecOfInt64s): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(vecOfInt64s), 0)
def AddVecOfInt64s(builder, vecOfInt64s):
    return VectorsOfIntsAddVecOfInt64s(builder, vecOfInt64s)
def VectorsOfIntsStartVecOfInt64sVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def StartVecOfInt64sVector(builder, numElems):
    return VectorsOfIntsStartVecOfInt64sVector(builder, numElems)
def VectorsOfIntsEnd(builder): return builder.EndObject()
def End(builder):
    return VectorsOfIntsEnd(builder)