# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flattrs_test

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AllEnums(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AllEnums()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAllEnums(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AllEnums
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AllEnums
    def SimpleUbyte(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # AllEnums
    def SimpleByte(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # AllEnums
    def Uint8enum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 254

    # AllEnums
    def Int8enum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return -127

    # AllEnums
    def Uint16enum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # AllEnums
    def Int16enum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return -30000

    # AllEnums
    def Uint32enum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 4000000000

    # AllEnums
    def Int32enum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # AllEnums
    def Uint64enum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 40000000000

    # AllEnums
    def Int64enum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return -40000000000

def AllEnumsStart(builder): builder.StartObject(10)
def Start(builder):
    return AllEnumsStart(builder)
def AllEnumsAddSimpleUbyte(builder, simpleUbyte): builder.PrependUint8Slot(0, simpleUbyte, 0)
def AddSimpleUbyte(builder, simpleUbyte):
    return AllEnumsAddSimpleUbyte(builder, simpleUbyte)
def AllEnumsAddSimpleByte(builder, simpleByte): builder.PrependInt8Slot(1, simpleByte, 0)
def AddSimpleByte(builder, simpleByte):
    return AllEnumsAddSimpleByte(builder, simpleByte)
def AllEnumsAddUint8enum(builder, uint8enum): builder.PrependUint8Slot(2, uint8enum, 254)
def AddUint8enum(builder, uint8enum):
    return AllEnumsAddUint8enum(builder, uint8enum)
def AllEnumsAddInt8enum(builder, int8enum): builder.PrependInt8Slot(3, int8enum, -127)
def AddInt8enum(builder, int8enum):
    return AllEnumsAddInt8enum(builder, int8enum)
def AllEnumsAddUint16enum(builder, uint16enum): builder.PrependUint16Slot(4, uint16enum, 0)
def AddUint16enum(builder, uint16enum):
    return AllEnumsAddUint16enum(builder, uint16enum)
def AllEnumsAddInt16enum(builder, int16enum): builder.PrependInt16Slot(5, int16enum, -30000)
def AddInt16enum(builder, int16enum):
    return AllEnumsAddInt16enum(builder, int16enum)
def AllEnumsAddUint32enum(builder, uint32enum): builder.PrependUint32Slot(6, uint32enum, 4000000000)
def AddUint32enum(builder, uint32enum):
    return AllEnumsAddUint32enum(builder, uint32enum)
def AllEnumsAddInt32enum(builder, int32enum): builder.PrependInt32Slot(7, int32enum, 1)
def AddInt32enum(builder, int32enum):
    return AllEnumsAddInt32enum(builder, int32enum)
def AllEnumsAddUint64enum(builder, uint64enum): builder.PrependUint64Slot(8, uint64enum, 40000000000)
def AddUint64enum(builder, uint64enum):
    return AllEnumsAddUint64enum(builder, uint64enum)
def AllEnumsAddInt64enum(builder, int64enum): builder.PrependInt64Slot(9, int64enum, -40000000000)
def AddInt64enum(builder, int64enum):
    return AllEnumsAddInt64enum(builder, int64enum)
def AllEnumsEnd(builder): return builder.EndObject()
def End(builder):
    return AllEnumsEnd(builder)