# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flattrs_test

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class OptionalTableAfterEnum(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = OptionalTableAfterEnum()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOptionalTableAfterEnum(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # OptionalTableAfterEnum
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # OptionalTableAfterEnum
    def AnEnum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return -126

    # OptionalTableAfterEnum
    def OptTable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from flattrs_test.Common1 import Common1
            obj = Common1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def OptionalTableAfterEnumStart(builder): builder.StartObject(2)
def Start(builder):
    return OptionalTableAfterEnumStart(builder)
def OptionalTableAfterEnumAddAnEnum(builder, anEnum): builder.PrependInt8Slot(0, anEnum, -126)
def AddAnEnum(builder, anEnum):
    return OptionalTableAfterEnumAddAnEnum(builder, anEnum)
def OptionalTableAfterEnumAddOptTable(builder, optTable): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(optTable), 0)
def AddOptTable(builder, optTable):
    return OptionalTableAfterEnumAddOptTable(builder, optTable)
def OptionalTableAfterEnumEnd(builder): return builder.EndObject()
def End(builder):
    return OptionalTableAfterEnumEnd(builder)