# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flattrs_test

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Common1(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Common1()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCommon1(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Common1
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Common1
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Common1
    def ASmallInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Common1
    def ABigInt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def Common1Start(builder): builder.StartObject(3)
def Start(builder):
    return Common1Start(builder)
def Common1AddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def AddId(builder, id):
    return Common1AddId(builder, id)
def Common1AddASmallInt(builder, aSmallInt): builder.PrependUint8Slot(1, aSmallInt, 0)
def AddASmallInt(builder, aSmallInt):
    return Common1AddASmallInt(builder, aSmallInt)
def Common1AddABigInt(builder, aBigInt): builder.PrependInt32Slot(2, aBigInt, 0)
def AddABigInt(builder, aBigInt):
    return Common1AddABigInt(builder, aBigInt)
def Common1End(builder): return builder.EndObject()
def End(builder):
    return Common1End(builder)