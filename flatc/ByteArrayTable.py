# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ByteArrayTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ByteArrayTable()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsByteArrayTable(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ByteArrayTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ByteArrayTable
    def Contents(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # ByteArrayTable
    def ContentsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # ByteArrayTable
    def ContentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ByteArrayTable
    def ContentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

def ByteArrayTableStart(builder): builder.StartObject(1)
def Start(builder):
    return ByteArrayTableStart(builder)
def ByteArrayTableAddContents(builder, contents): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(contents), 0)
def AddContents(builder, contents):
    return ByteArrayTableAddContents(builder, contents)
def ByteArrayTableStartContentsVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def StartContentsVector(builder, numElems):
    return ByteArrayTableStartContentsVector(builder, numElems)
def ByteArrayTableEnd(builder): return builder.EndObject()
def End(builder):
    return ByteArrayTableEnd(builder)