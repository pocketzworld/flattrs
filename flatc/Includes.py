# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Includes(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Includes()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIncludes(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Includes
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Includes
    def Vec3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from vec3.Vec3 import Vec3
            obj = Vec3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def IncludesStart(builder): builder.StartObject(1)
def Start(builder):
    return IncludesStart(builder)
def IncludesAddVec3(builder, vec3): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(vec3), 0)
def AddVec3(builder, vec3):
    return IncludesAddVec3(builder, vec3)
def IncludesEnd(builder): return builder.EndObject()
def End(builder):
    return IncludesEnd(builder)